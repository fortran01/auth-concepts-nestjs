<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card">
            <div class="card-header bg-warning text-dark">
                <h3 class="mb-0">Multi-Factor Authentication Setup</h3>
            </div>
            <div class="card-body">
                {{#if flash.error}}
                <div class="alert alert-danger">
                    {{flash.error}}
                </div>
                {{/if}}
                
                <div class="alert alert-info">
                    <p><strong>Set up Multi-Factor Authentication</strong></p>
                    <p>Scan the QR code with an authenticator app like Google Authenticator, Authy, or Microsoft Authenticator.</p>
                    <p>For this demo, you can also use the built-in TOTP generator below to test.</p>
                </div>
                
                <h4>Secret Key (if QR code doesn't work):</h4>
                <div class="mb-3">
                    <input type="text" class="form-control text-center" value="{{secret}}" readonly>
                </div>
                
                <hr>
                
                <h4>QR Code</h4>
                <div class="mb-3 text-center">
                    <img src="https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=otpauth://totp/NestJS%20Auth%20Demo:admin?secret={{secret}}&issuer=NestJS%20Auth%20Demo" 
                         alt="QR Code" class="img-fluid" style="max-width: 200px;">
                </div>
                
                <hr>
                
                <h4>Demo TOTP Generator</h4>
                <div class="mb-4 text-center">
                    <div id="error-message" class="alert alert-danger d-none"></div>
                    <div class="display-4 p-3 bg-light rounded" id="totp">Loading...</div>
                    <small class="text-muted">Refreshes every 30 seconds. Use this code to test setup.</small>
                </div>
                
                <hr>
                
                <h4>Verify Your Setup</h4>
                <p>Enter the current six-digit code from your authenticator app to confirm setup:</p>
                
                <form action="/auth/session/setup-mfa" method="post">
                    <div class="mb-3">
                        <input type="text" class="form-control" name="token" pattern="[0-9]{6}" placeholder="Enter 6-digit code" required>
                    </div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-warning">Verify and Enable MFA</button>
                    </div>
                </form>
            </div>
            <div class="card-footer text-muted">
                <div class="d-flex justify-content-between">
                    <a href="/auth/session/protected" class="btn btn-outline-secondary btn-sm">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/jssha@3.3.1/dist/sha.min.js"></script>
<script>
// TOTP implementation for demo purposes
function generateTOTP(secret) {
    try {
        // Get current 30-second counter
        let epoch = Math.floor(Date.now() / 1000);
        let counter = Math.floor(epoch / 30);
        
        // Convert counter to bytes
        let counterBytes = new Uint8Array(8);
        for (let i = 7; i >= 0; i--) {
            counterBytes[i] = counter & 0xff;
            counter = counter >> 8;
        }
        
        // Base32 decode the secret
        let base32chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
        let bits = '';
        for (let i = 0; i < secret.length; i++) {
            let val = base32chars.indexOf(secret[i].toUpperCase());
            if (val === -1) throw new Error('Invalid base32 character in secret');
            bits += val.toString(2).padStart(5, '0');
        }
        
        // Ensure we have complete bytes
        bits = bits.slice(0, Math.floor(bits.length / 8) * 8);
        if (bits.length === 0) throw new Error('Secret too short');
        
        let secretBytes = new Uint8Array(bits.match(/.{8}/g).map(b => parseInt(b, 2)));
        
        // Calculate HMAC-SHA1
        let shaObj = new jsSHA("SHA-1", "UINT8ARRAY", { encoding: "UTF8" });
        shaObj.setHMACKey(secretBytes, "UINT8ARRAY");
        shaObj.update(counterBytes);
        let hmac = shaObj.getHMAC("UINT8ARRAY");
        
        // Get offset and truncate
        let offset = hmac[hmac.length - 1] & 0xf;
        let code = ((hmac[offset] & 0x7f) << 24) |
                   ((hmac[offset + 1] & 0xff) << 16) |
                   ((hmac[offset + 2] & 0xff) << 8) |
                   (hmac[offset + 3] & 0xff);
        
        // Get 6 digits
        return (code % 1000000).toString().padStart(6, '0');
    } catch (error) {
        console.error('TOTP generation error:', error);
        const errorDiv = document.getElementById('error-message');
        if (errorDiv) {
            errorDiv.textContent = 'Error generating TOTP code: ' + error.message;
            errorDiv.classList.remove('d-none');
        }
        return '------';
    }
}

// Update TOTP code every second
let secret = '{{secret}}';
let lastCode = '';
let errorShown = false;

function updateTOTP() {
    try {
        let epoch = Math.floor(Date.now() / 1000);
        let timeLeft = 30 - (epoch % 30);
        let code = generateTOTP(secret);
        
        const errorDiv = document.getElementById('error-message');
        const totpDiv = document.getElementById('totp');
        
        if (!errorDiv || !totpDiv) {
            console.error('Required elements not found');
            return;
        }
        
        if (code !== '------') {
            errorDiv.classList.add('d-none');
            errorShown = false;
        }
        
        totpDiv.textContent = `${code} (${timeLeft}s)`;
    } catch (error) {
        if (!errorShown) {
            console.error('Update error:', error);
            const errorDiv = document.getElementById('error-message');
            if (errorDiv) {
                errorDiv.textContent = 'Error updating TOTP code: ' + error.message;
                errorDiv.classList.remove('d-none');
            }
            errorShown = true;
        }
    }
}

// Wait for the library to load
window.onload = function() {
    const errorDiv = document.getElementById('error-message');
    if (typeof jsSHA === 'undefined') {
        if (errorDiv) {
            errorDiv.textContent = 'Error: Required library failed to load. Please refresh the page.';
            errorDiv.classList.remove('d-none');
        }
    } else {
        updateTOTP();
        setInterval(updateTOTP, 1000);
    }
};
</script> 