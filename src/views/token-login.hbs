<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h3 class="mb-0">Stateless Authentication</h3>
            </div>
            <div class="card-body">
                {{#if error}}
                <div class="alert alert-danger">
                    {{error}}
                </div>
                {{/if}}
                
                <p class="lead">{{message}}</p>
                
                <div class="alert alert-info">
                    <p><strong>About Stateless Authentication:</strong></p>
                    <p>This demo uses JWT (JSON Web Tokens) for stateless authentication. Key points:</p>
                    <ul>
                        <li>Your credentials are exchanged for a signed token</li>
                        <li>All session data is stored in the token itself</li>
                        <li>The token is stored in your browser's localStorage</li>
                        <li>The server is completely stateless and stores no session data</li>
                    </ul>
                </div>

                <div id="login-form">
                    <form id="token-login-form">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <button type="submit" class="btn btn-success">Login</button>
                    </form>
                </div>

                <div id="token-info" class="mt-4 d-none">
                    <div class="alert alert-success">
                        <p><strong>Login Success!</strong></p>
                        <p>Token has been stored in browser's localStorage.</p>
                    </div>
                    <button id="view-token-btn" class="btn btn-outline-primary mb-2">View Token</button>
                    <div id="token-display" class="d-none">
                        <div class="form-group">
                            <label>JWT Token:</label>
                            <textarea id="token-text" class="form-control" rows="5" readonly></textarea>
                        </div>
                        <div class="mt-2">
                            <label>Decoded Payload:</label>
                            <pre id="token-payload" class="border rounded p-3 bg-light"></pre>
                        </div>
                    </div>
                    <div class="mt-3">
                        <a href="/token/protected" class="btn btn-success">Access Protected Page</a>
                        <button id="logout-btn" class="btn btn-outline-danger ms-2">Logout</button>
                    </div>
                </div>

                <div id="login-error" class="alert alert-danger mt-3 d-none">
                    <p><strong>Authentication Failed!</strong></p>
                    <p id="error-message">Invalid credentials. Please try again.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Check if already logged in
        if (localStorage.getItem('jwt_token')) {
            document.getElementById('login-form').classList.add('d-none');
            document.getElementById('token-info').classList.remove('d-none');
        }

        // Handle login form submission
        document.getElementById('token-login-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                
                const response = await fetch('/token/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });
                
                if (!response.ok) {
                    throw new Error('Login failed');
                }
                
                const data = await response.json();
                
                // Store token in localStorage
                localStorage.setItem('jwt_token', data.access_token);
                
                // Update UI
                document.getElementById('login-form').classList.add('d-none');
                document.getElementById('token-info').classList.remove('d-none');
                document.getElementById('login-error').classList.add('d-none');
                
                // Show token in textarea
                document.getElementById('token-text').value = data.access_token;
                
                // Decode and display token payload
                const payloadBase64 = data.access_token.split('.')[1];
                const payload = JSON.parse(atob(payloadBase64));
                document.getElementById('token-payload').textContent = JSON.stringify(payload, null, 2);
            } catch (error) {
                console.error('Login error:', error);
                document.getElementById('login-error').classList.remove('d-none');
            }
        });
        
        // Toggle token display
        document.getElementById('view-token-btn').addEventListener('click', function() {
            const tokenDisplay = document.getElementById('token-display');
            tokenDisplay.classList.toggle('d-none');
            
            if (!tokenDisplay.classList.contains('d-none')) {
                const token = localStorage.getItem('jwt_token');
                document.getElementById('token-text').value = token;
                
                // Decode and display token payload
                const payloadBase64 = token.split('.')[1];
                const payload = JSON.parse(atob(payloadBase64));
                document.getElementById('token-payload').textContent = JSON.stringify(payload, null, 2);
            }
        });
        
        // Handle logout
        document.getElementById('logout-btn').addEventListener('click', function() {
            localStorage.removeItem('jwt_token');
            document.getElementById('login-form').classList.remove('d-none');
            document.getElementById('token-info').classList.add('d-none');
            document.getElementById('token-display').classList.add('d-none');
            document.getElementById('login-error').classList.add('d-none');
            document.getElementById('token-login-form').reset();
        });
    });
</script> 