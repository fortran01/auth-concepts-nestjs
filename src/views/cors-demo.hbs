<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CORS Demo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1, h2 {
            color: #333;
        }
        .endpoint-test {
            background: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .endpoint-test h3 {
            margin-top: 0;
        }
        button {
            background: #4285f4;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background: #3367d6;
        }
        .result {
            background: #e9e9e9;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
            max-height: 200px;
            overflow-y: auto;
        }
        code {
            background: #f0f0f0;
            padding: 2px 4px;
            border-radius: 3px;
        }
        .error {
            color: #d93025;
        }
        .success {
            color: #188038;
        }
    </style>
</head>
<body>
    <h1>Cross-Origin Resource Sharing (CORS) Demo</h1>
    
    <p>This page demonstrates CORS in action. We're running two separate servers:</p>
    <ul>
        <li><strong>API Server:</strong> Running on <code>http://localhost:3001/api</code></li>
        <li><strong>Client Server:</strong> Running on <code>http://localhost:4001</code></li>
    </ul>
    
    <p>Since these are different origins (different ports), the browser's same-origin policy will block requests from this page to the API server unless proper CORS headers are set.</p>
    
    <div class="endpoint-test">
        <h3>1. No CORS Headers</h3>
        <p>This request will be blocked by the browser's Same-Origin Policy because the API endpoint doesn't include any CORS headers.</p>
        <p><strong>Expected Result:</strong> Error message about CORS policy violation.</p>
        <button onclick="testEndpoint('/api/data', 'result1')">Test Request</button>
        <div id="result1" class="result">Results will appear here... (This should fail with a CORS error)</div>
    </div>
    
    <div class="endpoint-test">
        <h3>2. CORS Enabled for All Origins</h3>
        <p>This request will succeed because the API sets <code>Access-Control-Allow-Origin: *</code> header:</p>
        <button onclick="testEndpoint('/api/data-with-cors', 'result2')">Test Request</button>
        <div id="result2" class="result">Results will appear here...</div>
    </div>
    
    <div class="endpoint-test">
        <h3>3. CORS Enabled for Specific Origin</h3>
        <p>This request will succeed because we're calling from an allowed origin:</p>
        <button onclick="testEndpoint('/api/data-with-specific-cors', 'result3')">Test Request</button>
        <div id="result3" class="result">Results will appear here...</div>
    </div>
    
    <div class="endpoint-test">
        <h3>4. Complex Request with Preflight</h3>
        <p>This demonstrates a "complex" request that triggers a preflight OPTIONS request:</p>
        <button onclick="testComplexRequest('/api/data-with-preflight', 'result4')">Test Complex Request</button>
        <div id="result4" class="result">Results will appear here...</div>
    </div>
    
    <div class="endpoint-test">
        <h3>5. Advanced CORS Configuration</h3>
        <p>This demonstrates a comprehensive CORS configuration with credentials support and specific origin:</p>
        <button onclick="testEndpoint('/api/data-with-nest-cors', 'result5')">Test Request</button>
        <div id="result5" class="result">Results will appear here...</div>
    </div>
    
    <script>
        // Base URL of the API server
        const API_BASE_URL = 'http://localhost:3001';
        
        // Function to test a basic endpoint
        async function testEndpoint(endpoint, resultElementId) {
            const resultElement = document.getElementById(resultElementId);
            resultElement.innerHTML = "Sending request...";
            
            try {
                const response = await fetch(`${API_BASE_URL}${endpoint}`);
                const data = await response.json();
                
                resultElement.innerHTML = `<span class="success">✓ SUCCESS</span>\nResponse: ${JSON.stringify(data, null, 2)}`;
                
                // If endpoint is the one without CORS and we somehow got here, show a warning
                if (endpoint === '/api/data') {
                    resultElement.innerHTML += `\n\n<span class="error">WARNING: This request succeeded unexpectedly. Scenario 1 should demonstrate a CORS error.</span>`;
                }
            } catch (error) {
                resultElement.innerHTML = `<span class="error">✗ ERROR</span>\n${error.message}`;
                
                if (error.message.includes('CORS') || error.message.includes('cross-origin')) {
                    resultElement.innerHTML += `\n\nThis request was blocked by the browser's Same-Origin Policy because the API endpoint doesn't include proper CORS headers.
                    
This is expected for Scenario 1. In a real-world application, APIs need to explicitly allow cross-origin requests by adding appropriate CORS headers to their responses.`;
                }
                
                console.error('Request error details:', error);
            }
        }
        
        // Function to test a complex request that triggers preflight
        async function testComplexRequest(endpoint, resultElementId) {
            const resultElement = document.getElementById(resultElementId);
            resultElement.innerHTML = "Sending complex request (with preflight)...";
            
            try {
                // This is a "complex" request because it:
                // 1. Uses a non-simple content type
                // 2. Adds a custom header
                // Both of these will trigger a preflight OPTIONS request
                resultElement.innerHTML += "<br>Watch the Network tab in Developer Tools to see the OPTIONS request first!";
                
                const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Custom-Header': 'custom-value'
                    }
                });
                
                const data = await response.json();
                resultElement.innerHTML = `<span class="success">✓ SUCCESS</span>\nResponse: ${JSON.stringify(data, null, 2)}\n\nThis request was preceded by an automatic OPTIONS request (preflight).`;
            } catch (error) {
                resultElement.innerHTML = `<span class="error">✗ ERROR</span>\n${error.message}\n\nThis request was blocked by CORS policy. Check the browser console for details.`;
                console.error('CORS error details:', error);
            }
        }
    </script>
</body>
</html> 